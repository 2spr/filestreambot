import urllib.parse
from WebStreamer.bot import StreamBot
from WebStreamer.vars import Var
from WebStreamer.utils.human_readable import humanbytes
from WebStreamer.utils.database import Database
from pyrogram import filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import UserNotParticipant
from pyrogram.enums.parse_mode import ParseMode

db = Database(Var.DATABASE_URL, Var.SESSION_NAME)

START_TEXT = """
<i>üëã H è,</i>{}/n
<i>I'·¥ç T·¥á ü·¥á…¢ Ä·¥Ä·¥ç F…™ ü·¥ás S·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ B·¥è·¥õ ·¥Äs ·¥°·¥á ü ü D…™ Ä·¥á·¥Ñ·¥õ L…™…¥·¥ãs G·¥á…¥·¥á Ä·¥Ä·¥õ·¥á</i>\n
<i>H…™·¥õ /help ·¥õ·¥è …¢·¥á·¥õ ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥</i>"""

HELP_TEXT = """
<i>- F·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥ç·¥á ·¥Ä…¥ è Íú∞…™ ü·¥á (·¥è Ä) ·¥ç·¥á·¥Ö…™·¥Ä Íú∞ Ä·¥è·¥ç ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç.</i><b> I ·¥°…™ ü ü ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã W…™·¥õ ú M·¥Äss…™·¥†·¥á S·¥ò·¥á·¥á·¥Ö!.</b>

<i>- …™·¥õs ·¥á·¥Äs è ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á; ·¥ä·¥ús·¥õ A·¥Ö·¥Ö M·¥á …™…¥  è·¥è·¥ú Ä C ú·¥Ä…¥…¥·¥á ü ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥ F·¥è Ä D…™ Ä·¥á·¥Ñ·¥õ D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö L…™…¥·¥ãs B·¥ú·¥õ·¥õ·¥è…¥</i>\n

<u><b>WARNING</b></u>\n
<b> C·¥è·¥ò è Ä…™…¢ ú·¥õ ·¥Ñ·¥è…¥·¥õ·¥á…¥·¥õÍú±  ü·¥á·¥Ä·¥ÖÍú± ·¥õ·¥è ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ  ô·¥Ä…¥  è·¥è·¥ú.</b>\n
<i>U·¥ò·¥Ö·¥Ä·¥õ·¥ás</i> <b>: <a href='t.me/HombaleCinemas'>[ ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ]</a></b>"""

ABOUT_TEXT = """
<b>‚çü M è N·¥Ä·¥ç·¥á : {}</b>
<b>‚çü C Ä·¥á·¥Ä·¥õ·¥è Ä :  Ä2s·¥ò Ä</b>
<b>‚çü L·¥Ä…¥…¢·¥ú·¥Ä…¢·¥á : P è·¥õ ú·¥è…¥ 3 </b>
<b>‚çü S·¥á Ä·¥†·¥á Ä : C ü·¥è·¥ú·¥Ö L…™…¥·¥è·¥Ö·¥á</b>
<b>‚çü D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á : M·¥è…¥…¢·¥èDB</b>
<b>‚çü H·¥è·¥ç ô·¥Ä ü·¥á : F Ä·¥á·¥á ·¥ús·¥á Ä</b>"""

START_BUTTONS = InlineKeyboardMarkup(
        [[
        InlineKeyboardButton('H·¥á ü·¥ò', callback_data='help')],
        [InlineKeyboardButton('A ô·¥è·¥ú·¥õ', callback_data='about'),
        InlineKeyboardButton('C ü·¥ès·¥á', callback_data='close')
        ]]
    )
HELP_BUTTONS = InlineKeyboardMarkup(
        [[
        InlineKeyboardButton('H·¥è·¥ç·¥á', callback_data='home'),
        InlineKeyboardButton('A ô·¥è·¥ú·¥õ', callback_data='about'),
        InlineKeyboardButton('C ü·¥ès·¥á', callback_data='close')
        ]]
    )
ABOUT_BUTTONS = InlineKeyboardMarkup(
        [[
        InlineKeyboardButton('H·¥è·¥ç·¥á', callback_data='home'),
        InlineKeyboardButton('H·¥á ü·¥ò', callback_data='help'),
        InlineKeyboardButton('C ü·¥ès·¥á', callback_data='close')
        ]]
    )

@StreamBot.on_callback_query()
async def cb_data(bot, update):
    if update.data == "home":
        await update.message.edit_text(
            text=START_TEXT.format(update.from_user.mention),
            disable_web_page_preview=True,
            reply_markup=START_BUTTONS
        )
    elif update.data == "help":
        await update.message.edit_text(
            text=HELP_TEXT,
            disable_web_page_preview=True,
            reply_markup=HELP_BUTTONS
        )
    elif update.data == "about":
        await update.message.edit_text(
            text=ABOUT_TEXT,
            disable_web_page_preview=True,
            reply_markup=ABOUT_BUTTONS
        )
    else:
        await update.message.delete()

def get_media_file_size(m):
    media = m.video or m.audio or m.document
    if media and media.file_size:
        return media.file_size
    else:
        return None


def get_media_file_name(m):
    media = m.video or m.document or m.audio
    if media and media.file_name:
        return urllib.parse.quote_plus(media.file_name)
    else:
        return None


@StreamBot.on_message(filters.command('start') & filters.private)
async def start(b, m):
    if not await db.is_user_exist(m.from_user.id):
        await db.add_user(m.from_user.id)
        await b.send_message(
            Var.BIN_CHANNEL,
            f"**N·¥á·¥° Us·¥á Ä J·¥è…™…¥·¥á·¥Ö:** \n\n__M è N·¥á·¥° F Ä…™·¥á…¥·¥Ö__ [{m.from_user.first_name}](tg://user?id={m.from_user.id}) __S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö Y·¥è·¥ú Ä B·¥è·¥õ !!__"
        )
    usr_cmd = m.text.split("_")[-1]
    if usr_cmd == "/start":
        if Var.UPDATES_CHANNEL != "None":
            try:
                user = await b.get_chat_member(Var.UPDATES_CHANNEL, m.chat.id)
                if user.status == "kicked":
                    await b.send_message(
                        chat_id=m.chat.id,
                        text="__S·¥è Ä Ä è S…™ Ä, Y·¥è·¥ú ·¥Ä Ä·¥á B·¥Ä…¥…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥õ ú·¥á D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä__\n\n @AvishkarPatil **T ú·¥á è W…™ ü ü H·¥á ü·¥ò Y·¥è·¥ú**",
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True
                    )
                    return
            except UserNotParticipant:
                await b.send_message(
                    chat_id=m.chat.id,
                    text="<i>J·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á üîê</i>",
                    reply_markup=InlineKeyboardMarkup(
                        [[
                            InlineKeyboardButton("J·¥è…™…¥ …¥·¥è·¥° üîì", url=f"https://t.me/{Var.UPDATES_CHANNEL}")
                            ]]
                    ),
                    parse_mode=ParseMode.HTML
                )
                return
            except Exception:
                await b.send_message(
                    chat_id=m.chat.id,
                    text="<i>S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥° Ä·¥è…¥…¢ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä</i> <b><a href='http://t.me/r2spr'>[ ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ]</a></b>",
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True)
                return
        await m.reply_text(
            text=START_TEXT.format(m.from_user.mention),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=START_BUTTONS
              )                                                                         
                                                                                       
                                                                            
    else:
        if Var.UPDATES_CHANNEL != "None":
            try:
                user = await b.get_chat_member(Var.UPDATES_CHANNEL, m.chat.id)
                if user.status == "kicked":
                    await b.send_message(
                        chat_id=m.chat.id,
                        text="**S·¥è Ä Ä è, Y·¥è·¥ú ·¥Ä Ä·¥á G·¥è·¥õ B·¥Ä…¥…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä** @HombaleCinemas",
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True
                    )
                    return
            except UserNotParticipant:
                await b.send_message(
                    chat_id=m.chat.id,
                    text="J·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á üîê",
                    reply_markup=InlineKeyboardMarkup(
                        [[
                          InlineKeyboardButton("üîí J·¥è…™…¥ …¥·¥è·¥° T·¥è ·¥ú…¥ ü·¥è·¥Ñ·¥ã üîë", url=f"https://t.me/{Var.UPDATES_CHANNEL}")],
                         [InlineKeyboardButton("üîÑ R·¥á“ì Ä·¥ás ú / T Ä è A…¢·¥Ä…™…¥", url=f"https://t.me/{(await b.get_me()).username}?start=r2spr_{usr_cmd}")
                        
                        ]]
                    ),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            except Exception:
                await b.send_message(
                    chat_id=m.chat.id,
                    text="**S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ W Ä·¥è…¥…¢. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á** [H·¥è·¥ç ô·¥Ä ü·¥áC…™…¥·¥á·¥ç·¥Äs](https://t.me/HombaleCinemas).",
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True)
                return

        get_msg = await b.get_messages(chat_id=Var.BIN_CHANNEL, message_ids=int(usr_cmd))
        file_name = get_media_file_name(get_msg)
        file_size = humanbytes(get_media_file_size(get_msg))

        stream_link = "https://{}/{}/{}".format(Var.FQDN, get_msg.id, file_name) if Var.ON_HEROKU or Var.NO_PORT else \
            "http://{}:{}/{}/{}".format(Var.FQDN,
                                     Var.PORT,
                                     get_msg.id,
                                     file_name)

        msg_text ="""
<i><u>**Successfully ùñ¶ùñæùóáùñæùóãùñ∫ùóçùñæùñΩ ùñ∏ùóàùóéùóã ùñ´ùóÇùóáùóÑ !**</u></i>\n
<b>üóÉ F…™ ü·¥á …¥·¥Ä·¥ç·¥á :</b> <i>{}</i>\n
<b>üß≤ F…™ ü·¥á Íú±…™·¥¢·¥á :</b> <i>{}</i>\n
<b>üîΩ D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö :</b> <i>{}</i>\n
<b>üìù N·¥è·¥õ·¥á : L…™…¥·¥ã ·¥áx·¥ò…™ Ä·¥á·¥Ö …™…¥ 24  ú·¥è·¥ú ÄÍú±</b>\n
<i>ü•∞ Y·¥è·¥ú ·¥Ñ·¥Ä…¥, T ú·¥Ä…¥·¥ã ·¥ç·¥á  ü·¥Ä·¥õ·¥á Ä :</i> <b>@r2spr</b>
"""

        await m.reply_text(
            text=msg_text.format(file_name, file_size, stream_link),
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö …¥·¥è·¥° üì•", url=stream_link)],[InlineKeyboardButton("W·¥Ä·¥õ·¥Ñ ú O…¥ ü…™…¥·¥á(MX P ü·¥Ä è·¥á Ä | VLC | O·¥ò·¥á Ä·¥Ä)üëÄ‚ñ∂Ô∏è", url=stream_link)]])
        )



@StreamBot.on_message(filters.private & filters.command(["about"]))
async def start(bot, update):
    await update.reply_text(
        text=ABOUT_TEXT.format(update.from_user.mention),
        disable_web_page_preview=True,
        reply_markup=ABOUT_BUTTONS
    )


@StreamBot.on_message(filters.command('help') & filters.private)
async def help_handler(bot, message):
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id)
        await bot.send_message(
            Var.BIN_CHANNEL,
            f"**N·¥á·¥° Us·¥á Ä J·¥è…™…¥·¥á·¥Ö **\n\n__M è N·¥á·¥° F Ä…™·¥á…¥·¥Ö__ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) __Started Your Bot !!__"
        )
    if Var.UPDATES_CHANNEL is not None:
        try:
            user = await bot.get_chat_member(Var.UPDATES_CHANNEL, message.chat.id)
            if user.status == "kicked":
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="<i>S·¥è Ä Ä è, Y·¥è·¥ú ·¥Ä Ä·¥á B·¥Ä…¥…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥õ ú·¥á D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä @HombaleCinemas !</i>",
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
                return
        except UserNotParticipant:
            await bot.send_message(
                chat_id=message.chat.id,
                text="J·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á üîê",
                reply_markup=InlineKeyboardMarkup(
                    [[
                        InlineKeyboardButton("üîí J·¥è…™…¥ …¥·¥è·¥° T·¥è ·¥ú…¥ ü·¥è·¥Ñ·¥ã üîë", url=f"https://t.me/{Var.UPDATES_CHANNEL}")
                        ]]
                ),
                parse_mode=ParseMode.MARKDOWN
            )
            return
        except Exception:
            await bot.send_message(
                chat_id=message.chat.id,
                text="__S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ W Ä·¥è…¥…¢. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á__ [R2s·¥ò Ä](https://t.me/r2spr).",
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True)
            return
    await message.reply_text(
        text=HELP_TEXT,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=HELP_BUTTONS
        )

